"""Add insightface_embedding column to image_embeddings

Revision ID: 3388ad7dc052
Revises: 
Create Date: 2024-10-08 17:42:11.639910

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from pgvector.sqlalchemy import Vector


# revision identifiers, used by Alembic.
revision: str = '3388ad7dc052'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('base_image_urls',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_url', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_base_image_urls_base_url', 'base_image_urls', ['base_url'], unique=False)
    op.create_table('batches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('page_number', name='_page_number_uc')
    )
    op.create_index('idx_batches_processed', 'batches', ['processed'], unique=False)
    op.create_table('checkpoints',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('page_url', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('page_url')
    )
    op.create_index('idx_checkpoints_page_url', 'checkpoints', ['page_url'], unique=False)
    op.create_table('host_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('host_name', sa.String(), nullable=False),
    sa.Column('function_name', sa.String(), nullable=False),
    sa.Column('log_file', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_host_logs_function_name', 'host_logs', ['function_name'], unique=False)
    op.create_index('idx_host_logs_host_name', 'host_logs', ['host_name'], unique=False)
    op.create_table('test_embeddings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('embedding', Vector(dim=512), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_test_embeddings_embedding', 'test_embeddings', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_table('batch_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('host_log_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['batches.id'], ),
    sa.ForeignKeyConstraint(['host_log_id'], ['host_logs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_batch_logs_batch_id', 'batch_logs', ['batch_id'], unique=False)
    op.create_table('images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_url_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['base_url_id'], ['base_image_urls.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('base_url_id', 'filename', name='_base_image_uc')
    )
    op.create_index('idx_images_base_url_id', 'images', ['base_url_id'], unique=False)
    op.create_index('idx_images_processed', 'images', ['processed'], unique=False)
    op.create_table('archived_images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=False),
    sa.Column('archive_url', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('image_id')
    )
    op.create_index('idx_archived_images_archive_url', 'archived_images', ['archive_url'], unique=False)
    op.create_index('idx_archived_images_image_id', 'archived_images', ['image_id'], unique=False)
    op.create_table('batch_images',
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['batches.id'], ),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('batch_id', 'image_id')
    )
    op.create_index('idx_batch_images_batch_id', 'batch_images', ['batch_id'], unique=False)
    op.create_index('idx_batch_images_image_id', 'batch_images', ['image_id'], unique=False)
    op.create_table('image_embeddings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=True),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('embedding', Vector(dim=512), nullable=True),
    sa.Column('insightface_embedding', Vector(dim=512), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_image_embeddings_embedding', 'image_embeddings', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_index('idx_image_embeddings_image_id', 'image_embeddings', ['image_id'], unique=False)
    op.create_index('idx_image_embeddings_insightface_embedding', 'image_embeddings', ['insightface_embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'insightface_embedding': 'vector_cosine_ops'})
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_image_embeddings_insightface_embedding', table_name='image_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'insightface_embedding': 'vector_cosine_ops'})
    op.drop_index('idx_image_embeddings_image_id', table_name='image_embeddings')
    op.drop_index('idx_image_embeddings_embedding', table_name='image_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_table('image_embeddings')
    op.drop_index('idx_batch_images_image_id', table_name='batch_images')
    op.drop_index('idx_batch_images_batch_id', table_name='batch_images')
    op.drop_table('batch_images')
    op.drop_index('idx_archived_images_image_id', table_name='archived_images')
    op.drop_index('idx_archived_images_archive_url', table_name='archived_images')
    op.drop_table('archived_images')
    op.drop_index('idx_images_processed', table_name='images')
    op.drop_index('idx_images_base_url_id', table_name='images')
    op.drop_table('images')
    op.drop_index('idx_batch_logs_batch_id', table_name='batch_logs')
    op.drop_table('batch_logs')
    op.drop_index('idx_test_embeddings_embedding', table_name='test_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_table('test_embeddings')
    op.drop_index('idx_host_logs_host_name', table_name='host_logs')
    op.drop_index('idx_host_logs_function_name', table_name='host_logs')
    op.drop_table('host_logs')
    op.drop_index('idx_checkpoints_page_url', table_name='checkpoints')
    op.drop_table('checkpoints')
    op.drop_index('idx_batches_processed', table_name='batches')
    op.drop_table('batches')
    op.drop_index('idx_base_image_urls_base_url', table_name='base_image_urls')
    op.drop_table('base_image_urls')
    # ### end Alembic commands ###
